name: PHP CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual test run'

jobs:
  validate:
    name: PHP Validation
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: glueful_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    strategy:
      matrix:
        php-versions: ['8.2', '8.3']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, intl, zip, pdo_mysql
        coverage: xdebug
        tools: composer:v2
        ini-values: memory_limit=1G, max_execution_time=0, xdebug.mode=off
    
    - name: Setup test environment
      run: |
        mkdir -p build/logs
        if [ -f .env.example ]; then
          cp .env.example .env.testing
          echo "DB_CONNECTION=mysql" >> .env.testing
          echo "DB_HOST=127.0.0.1" >> .env.testing
          echo "DB_PORT=3306" >> .env.testing
          echo "DB_DATABASE=glueful_test" >> .env.testing
          echo "DB_USERNAME=root" >> .env.testing
          echo "DB_PASSWORD=password" >> .env.testing
        fi
    
    - name: Validate composer.json
      run: |
        echo "Validating composer.json..."
        # First run without --strict to see all warnings
        composer validate || true
        echo "---"
        # Then check if there are critical errors (less strict)
        composer validate || { echo "Critical errors in composer.json - please fix them"; exit 1; }
      
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Check PHP syntax
      run: find . -name "*.php" -not -path "./vendor/*" -print0 | xargs -0 -n1 php -l
      
    - name: Check coding standards
      run: |
        if [ -f vendor/bin/phpcs ]; then
          vendor/bin/phpcs --standard=PSR12 src
        else
          echo "PHP_CodeSniffer not installed - skipping coding standards check"
        fi
      
    - name: Run test suite
      env:
        XDEBUG_MODE: off
      run: |
        mkdir -p build/logs
        if [ -f vendor/bin/phpunit ]; then
          echo "Running PHPUnit tests without coverage first..."
          # First try running tests without coverage (more stable)
          if vendor/bin/phpunit --no-coverage --log-junit build/logs/junit.xml; then
            echo "Tests passed! Now attempting with coverage..."
            # If tests pass, try with coverage but don't fail if it segfaults
            vendor/bin/phpunit --coverage-text --coverage-clover build/logs/clover.xml || {
              echo "Coverage generation failed (possibly due to memory/segfault), but tests passed"
              echo "Tests passed but coverage generation failed" > build/logs/test-summary.txt
            }
          else
            # Tests failed, run again to get the failure output
            echo "Tests failed. Running again for detailed output..."
            vendor/bin/phpunit --no-coverage || true
            exit 1
          fi
        else
          echo "PHPUnit not installed - skipping tests"
          echo "No tests were run - PHPUnit not installed" > build/logs/test-summary.txt
        fi
        
    - name: Static analysis
      run: |
        if [ -f vendor/bin/phpstan ]; then
          vendor/bin/phpstan analyse src --level=5
        else
          echo "PHPStan not installed - skipping static analysis"
        fi

    - name: Security audit (production profile)
      run: |
        if [ -f vendor/bin/glueful ]; then
          php vendor/bin/glueful security:check --production || exit 1
        else
          echo "Glueful CLI not installed - skipping security audit"
        fi

    - name: Health endpoints smoke test
      if: hashFiles('public/index.php') != ''
      run: |
        # Start PHP built-in server (adjust docroot/entrypoint as needed)
        php -S 127.0.0.1:8080 -t public/ >/dev/null 2>&1 &
        SERVER_PID=$!
        # Wait for server to be ready (with timeout)
        for i in {1..10}; do
          if curl -fsS http://127.0.0.1:8080/healthz; then break; fi
          echo "Waiting for server... attempt $i"; sleep 1
        done
        # Test readiness (may require auth/allowlist in production)
        curl -fsS http://127.0.0.1:8080/ready || echo "Readiness may require auth/allowlist"
        # Cleanup
        kill $SERVER_PID
    
    - name: Benchmarks (report only)
      run: |
        mkdir -p build/logs
        if [ -f tools/bench/bench.php ]; then
          php tools/bench/bench.php | tee build/logs/bench.txt
        else
          echo "Bench script missing; see docs/observability/CI_TEST_BENCHMARK_HARNESS.md" | tee build/logs/bench.txt
        fi
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: build/logs/bench.txt
        if-no-files-found: warn

    - name: Restore bench baseline (optional)
      uses: actions/cache@v4
      with:
        path: build/logs/bench-baseline.txt
        key: bench-baseline-${{ runner.os }}

    - name: Enforce dispatch latency budget (optional)
      run: |
        if [ -f build/logs/bench.txt ]; then
          BUDGET=1500 # ms for 1000 dispatches example
          ACTUAL=$(grep -Eo 'Dispatch x1000: [0-9]+\.?[0-9]*' build/logs/bench.txt | awk '{print $3}')
          echo "Actual: $ACTUAL ms (budget $BUDGET ms)"
          awk -v a="$ACTUAL" -v b="$BUDGET" 'BEGIN{ if (a>b) exit 1 }'
        fi
        if [ -f build/logs/bench-baseline.txt ] && [ -f build/logs/bench.txt ]; then
          BASE=$(awk '{print $3}' build/logs/bench-baseline.txt)
          CURR=$(awk '{print $3}' build/logs/bench.txt)
          TOL=0.10
          MAX=$(awk -v b="$BASE" -v t="$TOL" 'BEGIN{print b*(1+t)}')
          echo "Baseline: $BASE ms; Current: $CURR ms; Max: $MAX ms"
          awk -v c="$CURR" -v m="$MAX" 'BEGIN{ if (c>m) exit 1 }'
        fi
        
    - name: Prepare artifact directory
      run: |
        mkdir -p build/logs
        # Create a summary file with information about the run
        echo "PHP CI Run - $(date)" > build/logs/run-summary.txt
        echo "PHP Version: ${{ matrix.php-versions }}" >> build/logs/run-summary.txt
        
        # List all available test results
        echo "Available test results:" >> build/logs/run-summary.txt
        ls -la build/logs/ >> build/logs/run-summary.txt 2>&1 || echo "No test results found" >> build/logs/run-summary.txt
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/logs/
        if-no-files-found: warn # Changed from 'error' to 'warn'
